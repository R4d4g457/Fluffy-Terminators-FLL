
def sleep(sec: float) -> None:
    """Sleep for *sec* seconds.""" ...
def sleep_ms(ms: int) -> None:
    """Sleep for *ms* milliseconds.""" ...
def ticks_ms() -> int:
    """Return an increasing millisecond tick counter (wraps).""" ...
def ticks_us() -> int:
    """Return an increasing microsecond tick counter (wraps).""" ...
def ticks_add(ticks: int, delta: int) -> int:
    """Return *ticks* + *delta* with wrap-around semantics.""" ...
def ticks_diff(a: int, b: int) -> int:
    """Compute signed difference a-b with wrap-around awareness.""" ...
def time() -> int:
    """Seconds since epoch (implementation-defined).""" ...
def localtime(secs: int = ...) -> tuple:
    """Break seconds into (year, month, mday, hour, minute, second, weekday, yearday).""" ...
def mktime(t: tuple) -> int:
    """Inverse of localtime(): pack tuple into seconds since epoch.""" ...
