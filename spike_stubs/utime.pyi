
"""MicroPython-compatible time module (subset)."""
def sleep(seconds: float) -> None:
    """Block for *seconds* seconds (may be fractional).""" ...
def sleep_ms(ms: int) -> None:
    """Block for *ms* milliseconds.""" ...
def ticks_ms() -> int:
    """Return an increasing millisecond counter (wraps around after a period).""" ...
def ticks_add(ticks: int, delta: int) -> int:
    """Return ``ticks + delta`` with wrap-around semantics.""" ...
def ticks_diff(t1: int, t0: int) -> int:
    """Return signed difference ``t1 - t0`` accounting for wrap-around.""" ...
def localtime(secs: int = ...) -> tuple:
    """Convert *secs* since epoch to a time tuple: (year, month, mday, hour, minute, second, weekday, yearday).""" ...
def mktime(t: tuple) -> int:
    """Convert a time tuple to seconds since epoch (inverse of ``localtime``).""" ...
